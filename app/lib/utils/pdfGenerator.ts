import jsPDF from 'jspdf';

interface ReportData {
  address: string;
  timestamp: string;
  summary: {
    totalChains: number;
    totalTokens: number;
    totalProtocols: number;
    totalNFTs: number;
    ethBalance: string;
  };
  data: any;
  creditScoreData?: any;
}

export function generatePDFReport(reportData: ReportData) {
  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(20);
  doc.text('Blockchain Address Analysis Report', 20, 30);
  
  // Address
  doc.setFontSize(14);
  doc.text(`Address: ${reportData.address}`, 20, 50);
  
  // Timestamp
  doc.setFontSize(10);
  doc.text(`Generated: ${new Date(reportData.timestamp).toLocaleString()}`, 20, 60);
  
  // Summary
  doc.setFontSize(16);
  doc.text('Summary', 20, 80);
  
  doc.setFontSize(12);
  doc.text(`• ETH Balance: ${reportData.summary.ethBalance} ETH`, 20, 95);
  doc.text(`• Active Chains: ${reportData.summary.totalChains}`, 20, 105);
  doc.text(`• Token Holdings: ${reportData.summary.totalTokens}`, 20, 115);
  doc.text(`• DeFi Protocols: ${reportData.summary.totalProtocols}`, 20, 125);
  doc.text(`• NFT Collections: ${reportData.summary.totalNFTs}`, 20, 135);

  // Credit Score Section
  if (reportData.creditScoreData) {
    doc.setFontSize(16);
    doc.text('Blockchain Credit Score', 20, 150);
    
    const { creditScore, interpretation } = reportData.creditScoreData;
    
    doc.setFontSize(12);
    doc.text(`Credit Score: ${creditScore.creditScore}`, 20, 165);
    doc.text(`Level: ${interpretation.level}`, 20, 175);
    doc.text(`Overall Score: ${creditScore.overall}/100`, 20, 185);
    
    doc.setFontSize(10);
    doc.text('Score Breakdown:', 20, 200);
    doc.text(`• Activity: ${creditScore.breakdown.activity}`, 20, 210);
    doc.text(`• Diversity: ${creditScore.breakdown.diversity}`, 20, 220);
    doc.text(`• Longevity: ${creditScore.breakdown.longevity}`, 20, 230);
    doc.text(`• Value: ${creditScore.breakdown.value}`, 20, 240);
    doc.text(`• Protocol: ${creditScore.breakdown.protocol}`, 20, 250);
    
    doc.setFontSize(10);
    doc.text('Characteristics:', 20, 265);
    interpretation.characteristics.forEach((char: string, index: number) => {
      doc.text(`• ${char}`, 20, 275 + (index * 10));
    });
  }
  
  // Chains
  if (reportData.data.debank.chains.length > 0) {
    doc.setFontSize(14);
    doc.text('Active Chains', 20, 155);
    
    doc.setFontSize(10);
    reportData.data.debank.chains.forEach((chain: any, index: number) => {
      if (155 + (index + 1) * 10 < 280) {
        doc.text(`• ${chain.name} (ID: ${chain.community_id})`, 20, 165 + index * 10);
      }
    });
  }
  
  // Tokens
  if (reportData.data.debank.tokens.length > 0) {
    doc.setFontSize(14);
    doc.text('Token Holdings', 20, 200);
    
    doc.setFontSize(10);
    reportData.data.debank.tokens.slice(0, 10).forEach((token: any, index: number) => {
      if (200 + (index + 1) * 10 < 280) {
        doc.text(`• ${token.symbol}: ${token.amount.toFixed(4)}`, 20, 210 + index * 10);
      }
    });
  }
  
  // Footer
  doc.setFontSize(8);
  doc.text('Generated by Blockchain Address Analyzer', 20, 290);
  
  return doc;
}

export function downloadPDFReport(reportData: ReportData) {
  const doc = generatePDFReport(reportData);
  doc.save(`blockchain-report-${reportData.address.slice(0, 8)}.pdf`);
}
